{% extends "WnBlogBundle::layout.html.twig" %}

{% block title %}Homepage{% endblock title %}

{% block css %}
	{{parent()}}
	{% stylesheets "@WnBlogBundle/Resources/public/css/articleHomepage.css"
				   "@WnModel3DBundle/Resources/public/css/modelHomepage.css"
				   "@WnGalleryBundle/Resources/public/css/imageHomepage.css"
				   "@WnBlogBundle/Resources/public/css/elementTransition.css" %}
	<link rel="stylesheet" type="text/css" href="{{asset_url}}">
	{% endstylesheets %}
{% endblock css%}

{% block javascript %}
<script type="text/javascript">
$(document).ready(function(){
	var $content = $('#content');

	//Modified Isotope methods for gutter in masonry
	$.Isotope.prototype._getMasonryGutterColumns = function() {
   	 var gutter = this.options.masonry && this.options.masonry.gutterWidth || 0;
        containerWidth = this.element.width();
  
	    this.masonry.columnWidth = this.options.masonry && this.options.masonry.columnWidth ||
	                  // or use the size of the first item
	                  this.$filteredAtoms.outerWidth(true) ||
	                  // if there's no items, use size of container
	                  containerWidth;

	    this.masonry.columnWidth += gutter;

	    this.masonry.cols = Math.floor( ( containerWidth + gutter ) / this.masonry.columnWidth );
	    this.masonry.cols = Math.max( this.masonry.cols, 1 );
  	};

  	$.Isotope.prototype._masonryReset = function() {
	    // layout-specific props
	    this.masonry = {};
	    // FIXME shouldn't have to call this again
	    this._getMasonryGutterColumns();
	    var i = this.masonry.cols;
	    this.masonry.colYs = [];
	    while (i--) {
	      this.masonry.colYs.push( 0 );
	    }
 	};

  $.Isotope.prototype._masonryResizeChanged = function() {
    var prevSegments = this.masonry.cols;
    // update cols/rows
    this._getMasonryGutterColumns();
    // return if updated cols/rows is not equal to previous
    return ( this.masonry.cols !== prevSegments );
  };
	
	$content.imagesLoaded(function(){
		var type_element_request = 'all';
		var element_start_at     = 1;
		var nb_element_request   = 2;
		$content.isotope({
			itemSelector : '.element',
			getSortData  : {
				date : function ( $elem ){
					return $elem.find('time').attr('date-time');
				}
			},
			masonry      : {
				gutterWidth : 2
			}
		});

		$('.filter').click(function (){
			console.log('ding');
			updateNav($(this));
			var filter = $(this).attr('data-filter');
			type_element_request = $(this).attr('element-type');
			$content.isotope({
				filter        : filter,
				sortBy        : 'date',
				sortAscending : false
			});
		});

		function updateNav(link){
			$('.filter').removeClass("actif");
			link.addClass("actif");
		}

		$(window).scroll(infiniteScrollEvent);

		function infiniteScrollEvent (){
			if($(window).scrollTop() + $(window).height() == $(document).height()){
				$('.loader').css('visibility','visible');
				var list_id = [];
				$('.element').not('.element-antibug').each(function (){
					list_id.push( parseInt($(this).attr('id')) );
				});
				console.log(list_id);
				console.log(type_element_request);
				$.ajax({
					type: "POST",
					url: "{{ path('wn_blog_homepage_element_update') }}",
					cache: false,
					data: {
						'category'    : type_element_request,
						'start_at'    : element_start_at,
						'max_element' : nb_element_request,
						'list_id'     : list_id
					},
					dataType: 'html',
					beforeSend : function(){
						$(window).off("scroll");
					},
					success: function(data){
						var $html = $( data );
						$content.append($html).isotope( 'insert', $html);
						$content.isotope({
							sortBy        : 'date',
							sortAscending : false
						});
						$('.loader').css('visibility','hidden');
						if(data == ''){
							console.log('ding');
						}
						$(window).on("scroll",infiniteScrollEvent);
					},
					error: function(data){
						$('.loader').css('visibility','hidden');
						console.log("Erreur");
						$(window).on("scroll",infiniteScrollEvent);
					}
				});
			}
		}


		{% if app.request.get('category') is null %}
			$("nav a:contains('Blog Perso')").trigger('click');
		{% else %}
			$("nav a:contains('{{app.request.get('category')}}')").trigger('click');
		{% endif %}

		$(window).resize(function(){
		});
	});
	

});
</script>
{% javascripts "@WnBlogBundle/Resources/public/jquery-ui/js/jquery-ui-1.10.3.custom.js" %}
	<script type="text/javascript" src="{{ asset_url }}"></script>
{% endjavascripts %}
{% endblock javascript %}
{% block container %}

<div id="content">
	<div class="element element-antibug"></div>
	{% for element in elements %}

		{# Representation des articles #}
		{% if element is wn_article %}
			{{ render(controller("WnBlogBundle:Article:viewOnHomepage", {'article' : element })) }}
		{# Representation des images de la gallery #}
		{% elseif element is wn_imageGallery %}
			{{ render(controller("WnGalleryBundle:ImageGallery:viewOnHomepage", {'image' : element })) }}
		{# Representation des model3D#}
		{% elseif element is wn_model3d %}
			{{ render(controller("WnModel3DBundle:Model3D:viewOnHomepage",{'model': element })) }}
		{% endif %}

	{% endfor %}
</div>

{% endblock container %}
